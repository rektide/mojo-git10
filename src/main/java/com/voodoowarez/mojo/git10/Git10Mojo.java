package com.voodoowarez.mojo.git10;

import java.io.File;
import java.net.URISyntaxException;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.eclipse.jgit.api.CloneCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.ResetCommand.ResetType;
import org.eclipse.jgit.api.errors.RefNotFoundException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.transport.URIish;

/**
* Goal which grabs a version of a tree
*
* @goal checkout
* @phase process-sources
*/
@Mojo(name = "git10")
public class Git10Mojo extends AbstractMojo
{
	/**
	* Repository address
	*/
	@Parameter(required=true)
	protected String repository;

	/**
	* Branch or Tag to checkout
	*/
	@Parameter
	protected String branchOrTag;

	/**
	* Name to use for remote repository.
	*/
	@Parameter(defaultValue= "origin")
	protected String remoteName;

	/**
	* Check out only asked for branch.
	*/
	@Parameter(defaultValue= "true")
	protected Boolean basic;

	/**
	* Which reset type to use.
	*/
	@Parameter(defaultValue= "HARD")
	protected ResetType resetType;

	/**
	* Where to install the results.
	*/
	@Parameter(defaultValue= "${project.build.directory}/generated-git10/"+HUMAN_NAME_TOKEN)
	protected String outputDirectory;

	/**
	* Human-name for repository, will be autogenerated from repository.
	*/
	@Parameter
	protected String humanName;

	protected static final String HUMAN_NAME_TOKEN = "${git10.humanName}";
	protected static final String DEFAULT_BRANCH_OR_TAG = "master";

	//// GENERATED ////

	protected URIish repoUri;
	protected File outputDir;

	public void execute() throws MojoExecutionException{
		try{
			this.repoUri = new URIish(this.repository);
		}catch(URISyntaxException e){
			throw new MojoExecutionException("Couldn't parse repository", e);
		}
		this.outputDirectory= this.outputDirectory.replace(HUMAN_NAME_TOKEN, repoUri.getHumanishName());
		this.outputDir = new File(this.outputDirectory);

		try{
			final Git git = this.outputDir.exists() ? this.updateRepo() : this.cloneRepo();
			checkout(git);
		}catch(Exception ex){
			throw new MojoExecutionException("Failed",ex);
		}
	}

	protected Git updateRepo() throws Exception{
		final FileRepositoryBuilder builder = new FileRepositoryBuilder();
		final Repository repository = builder.setGitDir(new File(this.outputDirectory+"/.git")).readEnvironment().findGitDir().build();
		final Git git = new Git(repository);
		git.fetch().setRemote(this.remoteName).call();
		return git;
	}
	
	protected Git cloneRepo() throws Exception{
		// setup
		final CloneCommand clone = Git.cloneRepository();
		clone.setURI(this.repository);
		clone.setDirectory(this.outputDir);
		if(this.branchOrTag != null){
			clone.setBranch(this.branchOrTag);
		}
		if(this.remoteName != null){
			clone.setRemote(this.remoteName);
		}
		clone.setCloneAllBranches(!basic);
		//UsernamePasswordCredentialsProvider user = new UsernamePasswordCredentialsProvider(login, password);
		//clone.setCredentialsProvider(user);

		final Git git = clone.call();
		return git;
	}

	protected void checkout(Git git) throws Exception{
		if(this.branchOrTag == null){
			this.branchOrTag = DEFAULT_BRANCH_OR_TAG;
		}
		try{
			git.branchCreate().setForce(true).setName("git10").setStartPoint("remotes/"+this.remoteName+"/"+this.branchOrTag).call();
		}catch(RefNotFoundException refEx){
			git.branchCreate().setForce(true).setName("git10").setStartPoint("tags/"+this.branchOrTag).call();
		}
		git.checkout().setName("git10").call();
		git.reset().setMode(this.resetType).call();
	}
}